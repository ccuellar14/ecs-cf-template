{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Parameters" : {
      "KeyName": {
        "Type": "AWS::EC2::KeyPair::KeyName",
        "Description": "Nombre de un KeyPair Existente para conectar con las Instancias de EC2"
      },
      "SubnetID": {
        "Type": "List<AWS::EC2::Subnet::Id>",
        "Description": "Lista de las Subredes existentes a usar por el LoadBalance y El Grupo Auto Escalable"
      },
      "DesiredCapacity": {
        "Type": "Number",
        "Default" : "1",
        "Description": "Numero de Instancias a Desplegar en el Arranque"
      },
      "MaxSize": {
        "Type": "Number",
        "Default" : "1",
        "Description": "NÃºmero Maximo de Instancias dentro del Cluster"
      },
      "InstanceType" : {
        "Description" : "Tipo de Instancias EC2 a usar en el Cluster",
        "Type" : "String",
        "Default" : "t2.micro",
        "AllowedValues" : [ 
            "t2.micro", 
            "t2.small", 
            "t2.medium",
            "t2.large", 
            "m3.medium", 
            "m3.large", 
            "m3.xlarge",
            "m3.2xlarge", 
            "c3.large", 
            "c3.xlarge", 
            "c3.2xlarge", 
            "c3.4xlarge", 
            "c3.8xlarge", 
            "c4.large", 
            "c4.xlarge",
            "c4.2xlarge", 
            "c4.4xlarge", 
            "c4.8xlarge", 
            "r3.large", 
            "r3.xlarge", 
            "r3.2xlarge", 
            "r3.4xlarge", 
            "r3.8xlarge",
            "i2.xlarge", 
            "i2.2xlarge", 
            "i2.4xlarge", 
            "i2.8xlarge", 
            "d2.xlarge", 
            "d2.2xlarge", 
            "d2.4xlarge", 
            "d2.8xlarge",
            "hi1.4xlarge", 
            "hs1.8xlarge", 
            "cr1.8xlarge", 
            "cc2.8xlarge"],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },
      "SSHLocation" : {
        "Description" : " El rango de direcciones IP que se puede utilizar para SSH a las instancias de EC2",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "EFSVolume": {
        "Type": "String",
        "Description": "Volumen EFS a Montar en Instancias del Cluster"
      }
    },
  
    "Mappings":{
        "AWSRegionToAMI":{
          "us-east-1":{
            "AMIID":"ami-eca289fb"
          },
          "us-east-2":{
            "AMIID":"ami-446f3521"
          },
          "us-west-1":{
            "AMIID":"ami-9fadf8ff"
          },
          "us-west-2":{
            "AMIID":"ami-7abc111a"
          },
          "eu-west-1":{
            "AMIID":"ami-a1491ad2"
          },
          "eu-central-1":{
            "AMIID":"ami-54f5303b"
          },
          "ap-northeast-1":{
            "AMIID":"ami-9cd57ffd"
          },
          "ap-southeast-1":{
            "AMIID":"ami-a900a3ca"
          },
          "ap-southeast-2":{
            "AMIID":"ami-5781be34"
          }
        }
    },
  
    "Resources" : {
      "ECSCluster": {
        "Type": "AWS::ECS::Cluster"
      },
      "ECSAutoScalingGroup" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "VPCZoneIdentifier" : { "Ref" : "SubnetID" },
          "LaunchConfigurationName" : { "Ref" : "ContainerInstances" },
          "MinSize" : "1",
          "MaxSize" : { "Ref" : "MaxSize" },
          "DesiredCapacity" : { "Ref" : "DesiredCapacity" }
        },
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT15M"
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime" : "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },
      "ContainerInstances": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "AWS::CloudFormation::Init" : {
            "config" : {
  
              "commands" : {
                "01_add_instance_to_cluster" : {
                  "command" : { "Fn::Join": [ "", [ 
                      "#!/bin/bash\n",
                      "echo ECS_CLUSTER=", 
                      { "Ref": "ECSCluster" }, 
                      " >> /etc/ecs/ecs.config"
                      ] ] }
                }
              },
  
              "files" : {
                "/etc/cfn/cfn-hup.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[main]\n",
                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                    "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]},
                  "mode"    : "000400",
                  "owner"   : "root",
                  "group"   : "root"
                },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                  "content": { "Fn::Join" : ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource ContainerInstances ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "runas=root\n"
                  ]]}
                }
              },
  
              "services" : {
                "sysvinit" : {
                  "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true", "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
                }
              }
            }
          }
        },
        "Properties": {
          "ImageId" : { "Fn::FindInMap" : [ "AWSRegionToAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
          "InstanceType"   : { "Ref" : "InstanceType" },
          "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
          "KeyName"        : { "Ref" : "KeyName" },
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
               "#!/bin/bash -xe\n",
               "yum install -y aws-cfn-bootstrap\n",

               "yum -y update\n",
               "yum install -y nfs-utils\n",
               "mkdir /mnt/gitlab\n",
               "chmod 7777 -R /mnt/gitlab\n",
               "echo ", { "Ref" : "EFSVolume" }, "':/ /mnt/gitlab nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0' >> /etc/fstab\n", 
               "mount -a\n",
               "chmod 7777 -R /mnt/gitlab\n",
  
               "/opt/aws/bin/cfn-init -v ",
               "         --stack ", { "Ref" : "AWS::StackName" },
               "         --resource ContainerInstances ",
               "         --region ", { "Ref" : "AWS::Region" }, "\n",
  
               "/opt/aws/bin/cfn-signal -e $? ",
               "         --stack ", { "Ref" : "AWS::StackName" },
               "         --resource ECSAutoScalingGroup ",
               "         --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}}
        }
      },
      "ECSServiceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ecs.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "ecs-service",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "elasticloadbalancing:Describe*",
                      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                      "ec2:Describe*",
                      "ec2:AuthorizeSecurityGroupIngress"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "EC2Role": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "ecs-service",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ecs:CreateCluster",
                      "ecs:RegisterContainerInstance",
                      "ecs:DeregisterContainerInstance",
                      "ecs:DiscoverPollEndpoint",
                      "ecs:Submit*",
                      "ecs:Poll"
                    ],
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "EC2InstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [
            {
              "Ref": "EC2Role"
            }
          ]
        }
      }
    },
  
    "Outputs" : {
      "ecscluster" : {
        "Value" : { "Ref" : "ECSCluster" }
      },
    }
  }